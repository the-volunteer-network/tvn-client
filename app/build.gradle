plugins {
    id 'com.android.application'
    id 'androidx.navigation.safeargs'
}

android {
    compileSdk 31

    //noinspection GroovyAssignabilityCheck
    defaultConfig {
        applicationId "edu.cnm.deepdive.tvnclient"
        minSdk 26
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        String propertyFile = "$projectDir/../../../services/tvn.properties"


        buildConfigField 'String', 'BASE_URL', quoted(getProperty(propertyFile, 'base_url'))
        buildConfigField 'String', 'CLIENT_ID', quoted(getProperty(propertyFile, 'client_id'))
        resValue 'string', 'api_key', getProperty("$projectDir/../../../services/tvn.properties", 'api_key')

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        'room.schemaLocation': "$projectDir/schemas".toString()
                ]
            }
        }

    }

    //noinspection GroovyAssignabilityCheck
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //noinspection GroovyAssignabilityCheck
    buildFeatures {
        //noinspection GroovyAssignabilityCheck
        viewBinding true
    }

}

dependencies {

    //Basic Android support libraries and components.
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    //Material Design components.
    implementation 'com.google.android.material:material:1.5.0'

    //Preferences/settings library.
    implementation 'androidx.preference:preference:1.2.0'

    //Fragment navigation libraries
    implementation 'androidx.fragment:fragment:1.4.1'
    implementation "androidx.navigation:navigation-fragment:$navigationVersion"
    implementation "androidx.navigation:navigation-ui:$navigationVersion"
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    //Lifecycle (LiveData and ViewModel)
    def lifecycleVersion = '2.4.1'
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"

    //Gson library.
    implementation 'com.google.code.gson:gson:2.9.0'

    //Retrofit and OkHTTP libraries.
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"

    //Reactivex libraries.
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    //Room libraries.
    def roomVersion = '2.4.2'
    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava3:$roomVersion"

    //Google Sign-in library.
    implementation 'com.google.android.gms:play-services-auth:20.1.0'

    //Stetho (inspection) library.
    implementation 'com.facebook.stetho:stetho:1.6.0'

    //Test Libraries.
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //Map

    implementation 'com.google.maps.android:android-maps-utils:2.3.0'
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.libraries.places:places:2.6.0'

}

static String getProperty(String filename, String propname) {
    Properties props = new Properties()
    props.load(new FileInputStream(filename))
    return props.getProperty(propname)
}

static String quoted(String input) {
    return "\"$input\""
}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc."
}

android.applicationVariants.all { variant ->

    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {

        title "TVN (${project.android.defaultConfig.versionName})"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(
                    file(projectDir)
                            .toPath()
                            .resolve("build/intermediates/javac/${variant.name}/classes"),
                    variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath()
            )
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        //noinspection GroovyAssignabilityCheck
        options {
            windowTitle = "TVN (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
            author = false
            links 'https://docs.oracle.com/javase/8/docs/api/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
            // Modify the items below for specific libraries used.
            links 'https://reactivex.io/RxJava/3.x/javadoc/'
            links 'https://javadoc.io/doc/com.google.code.gson/gson/latest/com.google.gson/'
            links 'https://square.github.io/retrofit/2.x/retrofit/'
            links 'https://square.github.io/picasso/2.x/picasso/'
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        failOnError true

    }

    task.dependsOn "assemble${variant.name.capitalize()}"
    generateApiDoc.dependsOn task

}
